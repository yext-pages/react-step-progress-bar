{"version":3,"file":"index.module.js","sources":["../src/components/step/transitions.js","../src/utils/index.js","../src/components/step/index.js","../src/components/progress-bar/index.js"],"sourcesContent":["export const transitions = {\n  scale: {\n    entering: { transform: \"translateX(-50%) scale(1.5)\" },\n    entered: { transform: \"translateX(-50%) scale(1)\" },\n    exiting: { transform: \"translateX(-50%) scale(1.5)\" },\n    exited: { transform: \"translateX(-50%) scale(1)\" },\n  },\n  rotate: {\n    entering: { transform: \"translateX(-50%) rotate(360deg)\" },\n    entered: { transform: \"translateX(-50%) rotate(0deg)\" },\n    exiting: { transform: \"translateX(-50%) rotate(0deg)\" },\n    exited: { transform: \"translateX(-50%) rotate(360deg)\" },\n  },\n  skew: {\n    entering: { transform: \"translateX(-50%) skewX(20deg)\" },\n    entered: { transform: \"translateX(-50%) skewX(0deg)\" },\n    exiting: { transform: \"translateX(-50%) skewX(20deg)\" },\n    exited: { transform: \"translateX(-50%) skewX(0deg)\" },\n  },\n};\n","export function getSafePercent(percent: number) {\n  if (percent > 100 || percent < 0 || typeof percent !== 'number') {\n    console.warn(\n      `[react-step-progress-bar]: The value passed to percent or position needs to be a number between 0 and 100 (passed value: ${percent}).`,\n    );\n  }\n  return Math.min(100, Math.max(percent, 0));\n}\n\nexport function getStepPosition(steps: number, stepIndex: number, hasStepZero: boolean) {\n  if (hasStepZero) {\n    return (100 / (steps - 1)) * stepIndex;\n  }\n  return (100 / steps) * (stepIndex + 1);\n}\n","/*\n<Step/>\n\nWhen wrapped by a <ProgressBar/>, this component renders a step of the progression.\n\nThe two main props here are accomplished and position.\n\n🏆 accomplished :\n\nAccomplished defines if the step has been achieved.\nA step is achieved when the progression percentage is over its position.\nAccomplished takes only two value : true or false.\n\n📍 position :\n\nPosition represents, wait for it... the position of the step.\nIt can be defined by how much the step is far from the left of the progress bar.\nWhere 0 = at the extreme left and 100 = at the extreme right.\nPosition only accepts values between 0 and 100.\n*/\n\nimport * as React from \"react\";\nimport invariant from \"invariant\";\nimport { Transition } from \"react-transition-group\";\nimport { transitions } from \"./transitions\";\nimport { getSafePercent } from \"../../utils\";\n\ntype StepProps = {|\n  accomplished: boolean,\n  position: number,\n  index: number,\n  children: ({\n    accomplished: boolean,\n    transitionState: string,\n    index: number,\n    position: number,\n  }) => React.Node,\n  transition?: \"scale\" | \"rotate\" | \"skew\",\n  transitionDuration?: number,\n|};\n\nexport class Step extends React.Component<StepProps> {\n  render() {\n    const {\n      accomplished,\n      position,\n      index,\n      children,\n      transition = null,\n      transitionDuration = 300,\n    } = this.props;\n\n    const safePosition = getSafePercent(position);\n\n    let style = {\n      left: `${safePosition}%`,\n      transitionDuration: `${transitionDuration}ms`,\n    };\n\n    return (\n      <Transition in={accomplished} timeout={transitionDuration}>\n        {(state) => {\n          if (transition) {\n            invariant(\n              transitions[transition] != null,\n              `${transition} is not listed in the built-in transitions.`\n            );\n            style = {\n              ...style,\n              ...transitions[transition][state],\n            };\n          }\n\n          return (\n            <div className=\"RSPBstep\" style={style}>\n              {children({\n                accomplished,\n                position: safePosition,\n                transitionState: state,\n                index,\n              })}\n            </div>\n          );\n        }}\n      </Transition>\n    );\n  }\n}\n","/*\n<ProgressBar/>\n\nThis component displays a progress bar.\n\nThe two main props here are percent and children.\n\n💯 percent :\n\nPercent defines the progression of the progress bar.\nIt has to be a number between 0 and 100 (other values won't be accepted).\n\n👶 children :\n\nChildren has to be a function.\nThe function will receive the parameters accomplished and position\nwhich are used in the <Step/> component.\nIf nothing is passed, it will renders a progress bar without any intermediate steps.\n*/\n\nimport * as React from \"react\";\nimport invariant from \"invariant\";\nimport { Step } from \"../step\";\nimport { getSafePercent, getStepPosition } from \"../../utils\";\n\ntype ProgressBarProps = {|\n  percent: number,\n  children: React.ChildrenArray<React.Element<typeof Step>>,\n  stepPositions?: Array<number>,\n  unfilledBackground?: string,\n  filledBackground?: string,\n  width?: number,\n  height?: number,\n  hasStepZero?: boolean,\n  text?: string,\n|};\n\nexport class ProgressBar extends React.Component<ProgressBarProps> {\n  render() {\n    const {\n      percent,\n      children,\n      stepPositions = [],\n      unfilledBackground = null,\n      filledBackground = null,\n      width = null,\n      height = null,\n      hasStepZero = true,\n      text = null,\n    } = this.props;\n\n    invariant(\n      !(\n        stepPositions.length > 0 &&\n        stepPositions.length !== React.Children.count(children)\n      ),\n      \"When specifying a stepPositions props, the number of children must match the length of the positions array.\"\n    );\n\n    const safePercent = getSafePercent(percent);\n\n    return (\n      <div\n        className=\"RSPBprogressBar\"\n        style={{ background: unfilledBackground, width, height }}\n      >\n        {/* Here we're looping over the children to clone them and add them custom props */}\n        {React.Children.map(children, (step, index) => {\n          const position =\n            stepPositions.length > 0\n              ? stepPositions[index]\n              : getStepPosition(\n                  React.Children.count(children),\n                  index,\n                  hasStepZero\n                );\n\n          return React.cloneElement(step, {\n            accomplished: position <= safePercent,\n            position,\n            index,\n          });\n        })}\n\n        {text ? <div className=\"RSPBprogressBarText\">{text}</div> : null}\n\n        <div\n          className=\"RSPBprogression\"\n          style={{\n            background: filledBackground,\n            width: `${safePercent}%`,\n          }}\n        />\n      </div>\n    );\n  }\n}\n"],"names":["transitions","scale","entering","transform","entered","exiting","exited","rotate","skew","getSafePercent","percent","console","warn","Math","min","max","Step","render","this","props","accomplished","index","children","transition","transitionDuration","safePosition","position","style","left","React","Transition","in","timeout","state","invariant","className","transitionState","Component","ProgressBar","stepPositions","unfilledBackground","filledBackground","width","height","hasStepZero","text","length","Children","count","safePercent","background","map","step","steps","stepIndex","getStepPosition","cloneElement"],"mappings":"8eAAaA,EAAc,CACzBC,MAAO,CACLC,SAAU,CAAEC,UAAW,+BACvBC,QAAS,CAAED,UAAW,6BACtBE,QAAS,CAAEF,UAAW,+BACtBG,OAAQ,CAAEH,UAAW,8BAEvBI,OAAQ,CACNL,SAAU,CAAEC,UAAW,mCACvBC,QAAS,CAAED,UAAW,iCACtBE,QAAS,CAAEF,UAAW,iCACtBG,OAAQ,CAAEH,UAAW,oCAEvBK,KAAM,CACJN,SAAU,CAAEC,UAAW,iCACvBC,QAAS,CAAED,UAAW,gCACtBE,QAAS,CAAEF,UAAW,iCACtBG,OAAQ,CAAEH,UAAW,2CCjBTM,EAAeC,GAM7B,OALIA,EAAU,KAAOA,EAAU,GAAwB,iBAAZA,IACzCC,QAAQC,iIACsHF,QAGzHG,KAAKC,IAAI,IAAKD,KAAKE,IAAIL,EAAS,ICmC5BM,IAAAA,uGACXC,OAAA,WACE,MAOIC,KAAKC,MANPC,IAAAA,aAEAC,IAAAA,MACAC,IAAAA,aACAC,WAAAA,aAAa,WACbC,mBAAAA,aAAqB,MAGjBC,EAAehB,IAPnBiB,UASEC,EAAQ,CACVC,KAASH,MACTD,mBAAuBA,qBAGzB,OACEK,gBAACC,GAAWC,GAAIX,EAAcY,QAASR,GACpC,SAACS,GAYA,OAXIV,IACFW,EAC6B,MAA3BlC,EAAYuB,GACTA,iDAELI,OACKA,EACA3B,EAAYuB,GAAYU,kBAK7BJ,uBAAKM,UAAU,WAAWR,MAAOA,GAC9BL,EAAS,CACRF,aAAAA,EACAM,SAAUD,EACVW,gBAAiBH,EACjBZ,MAAAA,WAtCUQ,EAAMQ,WCJnBC,uGACXrB,OAAA,WACE,MAUIC,KAAKC,MATPT,IAAAA,QACAY,IAAAA,aACAiB,cAAAA,aAAgB,SAChBC,mBAAAA,aAAqB,WACrBC,iBAAAA,aAAmB,WACnBC,MAAAA,aAAQ,WACRC,OAAAA,aAAS,WACTC,YAAAA,oBACAC,KAAAA,aAAO,OAGTX,IAEIK,EAAcO,OAAS,GACvBP,EAAcO,SAAWjB,EAAMkB,SAASC,MAAM1B,IAEhD,+GAGF,IAAM2B,EAAcxC,EAAeC,gBAEnC,OACEmB,uBACEM,UAAU,kBACVR,MAAO,CAAEuB,WAAYV,EAAoBE,MAAAA,EAAOC,OAAAA,IAG/Cd,EAAMkB,SAASI,IAAI7B,EAAU,SAAC8B,EAAM/B,GACnC,IAAMK,EACJa,EAAcO,OAAS,EACnBP,EAAclB,YF7DEgC,EAAeC,EAAmBV,GAChE,OAAIA,OACaS,EAAQ,GAAMC,MAEjBD,GAAUC,EAAY,GE0DtBC,CACE1B,EAAMkB,SAASC,MAAM1B,GACrBD,EACAuB,gBAGR,OAAOf,EAAM2B,aAAaJ,EAAM,CAC9BhC,aAAcM,GAAYuB,EAC1BvB,SAAAA,EACAL,MAAAA,MAIHwB,eAAOhB,uBAAKM,UAAU,uBAAuBU,GAAc,kBAE5DhB,uBACEM,UAAU,kBACVR,MAAO,CACLuB,WAAYT,EACZC,MAAUO,cArDWpB,EAAMQ"}